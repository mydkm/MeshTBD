import pymeshlab as pyml #type:ignore
import pyvista as pv #type:ignore
import numpy as np
from matplotlib.colors import rgb_to_hsv   # convenient RGB→HSV converter
from pathlib import Path

# ──────────────────────────────────────────────────────────────────────────────
# 1.  PyMeshLab pipeline (unchanged)
# ──────────────────────────────────────────────────────────────────────────────
ms = pyml.MeshSet()
ms.load_new_mesh("Just forearm.stl")
surface_id = ms.current_mesh_id()

ms.generate_surface_reconstruction_vcg(voxsize=pyml.PercentageValue(0.499991))
ms.set_current_mesh(1)
ms.save_current_mesh("plymcout.ply")
ms.load_new_mesh("plymcout.ply")

ms.meshing_surface_subdivision_loop(threshold=pyml.PercentageValue(0.500009))
ms.generate_sampling_poisson_disk(samplenum=50, exactnumflag=True)
pointcloud_id = ms.current_mesh_id()

ms.set_current_mesh(surface_id)
ms.compute_color_by_point_cloud_voronoi_projection(
    coloredmesh=surface_id,
    vertexmesh=pointcloud_id,
    backward=True,
)

ms.save_current_mesh("z.ply")

# ──────────────────────────────────────────────────────────────────────────────
# 2.  Load with PyVista and strip the (transparent) alpha channel
# ──────────────────────────────────────────────────────────────────────────────
mesh = pv.read("z.ply")
n_pts = mesh.n_points

if "RGBA" in mesh.point_data:
    rgba = np.asarray(mesh.point_data["RGBA"])
    if rgba.ndim == 1:                      # flattened (4*n) → (n,4)
        rgba = rgba.reshape(n_pts, 4)
    rgb = rgba[:, :3].astype(np.uint8).copy()
    mesh.point_data.pop("RGBA")
    mesh.point_data["RGB"] = rgb

# ──────────────────────────────────────────────────────────────────────────────
# 3.  Identify red/orange vertices (HSV filter)
# ──────────────────────────────────────────────────────────────────────────────
# normalise to [0,1] for rgb_to_hsv()
rgb_norm = mesh["RGB"].astype(float) / 255.0
hsv      = rgb_to_hsv(rgb_norm)            # columns: H in [0,1], S, V

hue        = hsv[:, 0]                     # 0  → red, 0.14 → 50°
saturation = hsv[:, 1]

red_like = (hue <= 50/360.0) & (saturation >= 0.25)

# add a scalar mask so we can threshold
mesh["keep"] = red_like.astype(np.uint8)

# ──────────────────────────────────────────────────────────────────────────────
# 4.  Extract only the cells whose *all* vertices are red/orange
#     (threshold() with all_scalars=True keeps a cell only if every point
#      satisfies the criterion)
# ──────────────────────────────────────────────────────────────────────────────
red_mesh = mesh.threshold(
    (0.5, 1.5),          # keep == 1
    scalars="keep",
    all_scalars=True
)

ms.save_current_mesh("a.ply")

ms2 = pyml.MeshSet()
ms2.load_new_mesh('a.ply')

#ms2.generate_resampled_uniform_mesh(mergeclosevert = True, discretize = False, multisample = True, absdist = True)
# ms.apply_coord_laplacian_smoothing(stepsmoothnum = 100, cotangentweight = False)

#ms.save_current_mesh('new.ply')        # save *after* resampling

# ──────────────────────────────────────────────────────────────────────────────
# 5.  Plot the cleaned mesh
# ──────────────────────────────────────────────────────────────────────────────
resampled = pv.read('a.ply')
resampled.plot(
    rgb=True,
    show_scalar_bar=False,
    background="white",
)
