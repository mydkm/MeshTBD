import numpy as np
import open3d as o3d # type: ignore
import matplotlib.pyplot as plt
import matplotlib as mpl

mesh = o3d.io.read_triangle_mesh("a3.ply")
if mesh.is_empty():
    raise RuntimeError("Failed to load mesh!")
print("Loaded mesh!")

# mesh.remove_degenerate_triangles()
# mesh.remove_duplicated_triangles()
# mesh.remove_duplicated_vertices()
# mesh.remove_unreferenced_vertices()
# mesh.remove_non_manifold_edges()
# print('Mesh cleaned up!')
# print(
#     f'Simplified mesh has {len(mesh.vertices)} vertices and {len(mesh.triangles)} triangles'
# )

print('filter with Laplacian with 10 iterations')
mesh_out = mesh.filter_smooth_laplacian(number_of_iterations=10)
mesh_out.compute_vertex_normals()
o3d.visualization.draw_geometries([mesh_out])

print('filter with Laplacian with 50 iterations')
mesh_out = mesh.filter_smooth_laplacian(number_of_iterations=50)
mesh_out.compute_vertex_normals()
o3d.visualization.draw_geometries([mesh_out])

mesh_smp = mesh.simplify_quadric_decimation(target_number_of_triangles=6500)
print(
    f'Simplified mesh has {len(mesh_smp.vertices)} vertices and {len(mesh_smp.triangles)} triangles'
)
o3d.visualization.draw_geometries([mesh_smp])

mesh_smp = mesh.simplify_quadric_decimation(target_number_of_triangles=1700)
print(
    f'Simplified mesh has {len(mesh_smp.vertices)} vertices and {len(mesh_smp.triangles)} triangles'
)
o3d.visualization.draw_geometries([mesh_smp])


# mesh = o3d.geometry.TriangleMesh.create_sphere()
# mesh.compute_vertex_normals()
# o3d.visualization.draw_geometries([mesh])
# pcd = mesh.sample_points_uniformly(number_of_points=500)
# o3d.visualization.draw_geometries([pcd])

